/**
 * Autogenerated by Thrift Compiler (0.22.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "calciteserver_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




InvalidParseRequest::~InvalidParseRequest() noexcept {
}

InvalidParseRequest::InvalidParseRequest() noexcept
   : whatUp(0),
     whyUp() {
}

void InvalidParseRequest::__set_whatUp(const int32_t val) {
  this->whatUp = val;
}

void InvalidParseRequest::__set_whyUp(const std::string& val) {
  this->whyUp = val;
}
std::ostream& operator<<(std::ostream& out, const InvalidParseRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InvalidParseRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->whatUp);
          this->__isset.whatUp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->whyUp);
          this->__isset.whyUp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidParseRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidParseRequest");

  xfer += oprot->writeFieldBegin("whatUp", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->whatUp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("whyUp", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->whyUp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidParseRequest &a, InvalidParseRequest &b) {
  using ::std::swap;
  swap(a.whatUp, b.whatUp);
  swap(a.whyUp, b.whyUp);
  swap(a.__isset, b.__isset);
}

bool InvalidParseRequest::operator==(const InvalidParseRequest & rhs) const
{
  if (!(whatUp == rhs.whatUp))
    return false;
  if (!(whyUp == rhs.whyUp))
    return false;
  return true;
}

InvalidParseRequest::InvalidParseRequest(const InvalidParseRequest& other0) : TException() {
  whatUp = other0.whatUp;
  whyUp = other0.whyUp;
  __isset = other0.__isset;
}
InvalidParseRequest& InvalidParseRequest::operator=(const InvalidParseRequest& other1) {
  whatUp = other1.whatUp;
  whyUp = other1.whyUp;
  __isset = other1.__isset;
  return *this;
}
void InvalidParseRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidParseRequest(";
  out << "whatUp=" << to_string(whatUp);
  out << ", " << "whyUp=" << to_string(whyUp);
  out << ")";
}

const char* InvalidParseRequest::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidParseRequest";
  }
}


PlanResult::~PlanResult() noexcept {
}

PlanResult::PlanResult() noexcept
   : plan_result() {
}

void PlanResult::__set_plan_result(const std::string& val) {
  this->plan_result = val;
}
std::ostream& operator<<(std::ostream& out, const PlanResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PlanResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plan_result);
          this->__isset.plan_result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlanResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PlanResult");

  xfer += oprot->writeFieldBegin("plan_result", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->plan_result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlanResult &a, PlanResult &b) {
  using ::std::swap;
  swap(a.plan_result, b.plan_result);
  swap(a.__isset, b.__isset);
}

bool PlanResult::operator==(const PlanResult & rhs) const
{
  if (!(plan_result == rhs.plan_result))
    return false;
  return true;
}

PlanResult::PlanResult(const PlanResult& other2) {
  plan_result = other2.plan_result;
  __isset = other2.__isset;
}
PlanResult& PlanResult::operator=(const PlanResult& other3) {
  plan_result = other3.plan_result;
  __isset = other3.__isset;
  return *this;
}
void PlanResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PlanResult(";
  out << "plan_result=" << to_string(plan_result);
  out << ")";
}


