/**
 * Autogenerated by Thrift Compiler (0.22.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef calciteserver_TYPES_H
#define calciteserver_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class InvalidParseRequest;

class PlanResult;

typedef struct _InvalidParseRequest__isset {
  _InvalidParseRequest__isset() : whatUp(false), whyUp(false) {}
  bool whatUp :1;
  bool whyUp :1;
} _InvalidParseRequest__isset;

class InvalidParseRequest : public ::apache::thrift::TException {
 public:

  InvalidParseRequest(const InvalidParseRequest&);
  InvalidParseRequest& operator=(const InvalidParseRequest&);
  InvalidParseRequest() noexcept;

  virtual ~InvalidParseRequest() noexcept;
  int32_t whatUp;
  std::string whyUp;

  _InvalidParseRequest__isset __isset;

  void __set_whatUp(const int32_t val);

  void __set_whyUp(const std::string& val);

  bool operator == (const InvalidParseRequest & rhs) const;
  bool operator != (const InvalidParseRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidParseRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(InvalidParseRequest &a, InvalidParseRequest &b);

std::ostream& operator<<(std::ostream& out, const InvalidParseRequest& obj);

typedef struct _PlanResult__isset {
  _PlanResult__isset() : plan_result(false) {}
  bool plan_result :1;
} _PlanResult__isset;

class PlanResult : public virtual ::apache::thrift::TBase {
 public:

  PlanResult(const PlanResult&);
  PlanResult& operator=(const PlanResult&);
  PlanResult() noexcept;

  virtual ~PlanResult() noexcept;
  std::string plan_result;

  _PlanResult__isset __isset;

  void __set_plan_result(const std::string& val);

  bool operator == (const PlanResult & rhs) const;
  bool operator != (const PlanResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlanResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PlanResult &a, PlanResult &b);

std::ostream& operator<<(std::ostream& out, const PlanResult& obj);



#endif
