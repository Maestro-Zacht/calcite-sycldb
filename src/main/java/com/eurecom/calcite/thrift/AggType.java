/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.eurecom.calcite.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-05-09")
public class AggType implements org.apache.thrift.TBase<AggType, AggType._Fields>, java.io.Serializable, Cloneable, Comparable<AggType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AggType");

  private static final org.apache.thrift.protocol.TField AGG_FIELD_DESC = new org.apache.thrift.protocol.TField("agg", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OPERANDS_FIELD_DESC = new org.apache.thrift.protocol.TField("operands", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DISTINCT_FIELD_DESC = new org.apache.thrift.protocol.TField("distinct", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AggTypeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AggTypeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String agg; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> operands; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String type; // required
  public boolean distinct; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGG((short)1, "agg"),
    OPERANDS((short)2, "operands"),
    NAME((short)3, "name"),
    TYPE((short)4, "type"),
    DISTINCT((short)5, "distinct");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGG
          return AGG;
        case 2: // OPERANDS
          return OPERANDS;
        case 3: // NAME
          return NAME;
        case 4: // TYPE
          return TYPE;
        case 5: // DISTINCT
          return DISTINCT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DISTINCT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGG, new org.apache.thrift.meta_data.FieldMetaData("agg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERANDS, new org.apache.thrift.meta_data.FieldMetaData("operands", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTINCT, new org.apache.thrift.meta_data.FieldMetaData("distinct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AggType.class, metaDataMap);
  }

  public AggType() {
  }

  public AggType(
    java.lang.String agg,
    java.util.List<java.lang.Long> operands,
    java.lang.String name,
    java.lang.String type,
    boolean distinct)
  {
    this();
    this.agg = agg;
    this.operands = operands;
    this.name = name;
    this.type = type;
    this.distinct = distinct;
    setDistinctIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AggType(AggType other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAgg()) {
      this.agg = other.agg;
    }
    if (other.isSetOperands()) {
      java.util.List<java.lang.Long> __this__operands = new java.util.ArrayList<java.lang.Long>(other.operands);
      this.operands = __this__operands;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.distinct = other.distinct;
  }

  @Override
  public AggType deepCopy() {
    return new AggType(this);
  }

  @Override
  public void clear() {
    this.agg = null;
    this.operands = null;
    this.name = null;
    this.type = null;
    setDistinctIsSet(false);
    this.distinct = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAgg() {
    return this.agg;
  }

  public AggType setAgg(@org.apache.thrift.annotation.Nullable java.lang.String agg) {
    this.agg = agg;
    return this;
  }

  public void unsetAgg() {
    this.agg = null;
  }

  /** Returns true if field agg is set (has been assigned a value) and false otherwise */
  public boolean isSetAgg() {
    return this.agg != null;
  }

  public void setAggIsSet(boolean value) {
    if (!value) {
      this.agg = null;
    }
  }

  public int getOperandsSize() {
    return (this.operands == null) ? 0 : this.operands.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getOperandsIterator() {
    return (this.operands == null) ? null : this.operands.iterator();
  }

  public void addToOperands(long elem) {
    if (this.operands == null) {
      this.operands = new java.util.ArrayList<java.lang.Long>();
    }
    this.operands.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getOperands() {
    return this.operands;
  }

  public AggType setOperands(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> operands) {
    this.operands = operands;
    return this;
  }

  public void unsetOperands() {
    this.operands = null;
  }

  /** Returns true if field operands is set (has been assigned a value) and false otherwise */
  public boolean isSetOperands() {
    return this.operands != null;
  }

  public void setOperandsIsSet(boolean value) {
    if (!value) {
      this.operands = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public AggType setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getType() {
    return this.type;
  }

  public AggType setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public boolean isDistinct() {
    return this.distinct;
  }

  public AggType setDistinct(boolean distinct) {
    this.distinct = distinct;
    setDistinctIsSet(true);
    return this;
  }

  public void unsetDistinct() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DISTINCT_ISSET_ID);
  }

  /** Returns true if field distinct is set (has been assigned a value) and false otherwise */
  public boolean isSetDistinct() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DISTINCT_ISSET_ID);
  }

  public void setDistinctIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DISTINCT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case AGG:
      if (value == null) {
        unsetAgg();
      } else {
        setAgg((java.lang.String)value);
      }
      break;

    case OPERANDS:
      if (value == null) {
        unsetOperands();
      } else {
        setOperands((java.util.List<java.lang.Long>)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case DISTINCT:
      if (value == null) {
        unsetDistinct();
      } else {
        setDistinct((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AGG:
      return getAgg();

    case OPERANDS:
      return getOperands();

    case NAME:
      return getName();

    case TYPE:
      return getType();

    case DISTINCT:
      return isDistinct();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AGG:
      return isSetAgg();
    case OPERANDS:
      return isSetOperands();
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case DISTINCT:
      return isSetDistinct();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof AggType)
      return this.equals((AggType)that);
    return false;
  }

  public boolean equals(AggType that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_agg = true && this.isSetAgg();
    boolean that_present_agg = true && that.isSetAgg();
    if (this_present_agg || that_present_agg) {
      if (!(this_present_agg && that_present_agg))
        return false;
      if (!this.agg.equals(that.agg))
        return false;
    }

    boolean this_present_operands = true && this.isSetOperands();
    boolean that_present_operands = true && that.isSetOperands();
    if (this_present_operands || that_present_operands) {
      if (!(this_present_operands && that_present_operands))
        return false;
      if (!this.operands.equals(that.operands))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_distinct = true;
    boolean that_present_distinct = true;
    if (this_present_distinct || that_present_distinct) {
      if (!(this_present_distinct && that_present_distinct))
        return false;
      if (this.distinct != that.distinct)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAgg()) ? 131071 : 524287);
    if (isSetAgg())
      hashCode = hashCode * 8191 + agg.hashCode();

    hashCode = hashCode * 8191 + ((isSetOperands()) ? 131071 : 524287);
    if (isSetOperands())
      hashCode = hashCode * 8191 + operands.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((distinct) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(AggType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetAgg(), other.isSetAgg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agg, other.agg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOperands(), other.isSetOperands());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperands()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operands, other.operands);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDistinct(), other.isSetDistinct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistinct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distinct, other.distinct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AggType(");
    boolean first = true;

    sb.append("agg:");
    if (this.agg == null) {
      sb.append("null");
    } else {
      sb.append(this.agg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operands:");
    if (this.operands == null) {
      sb.append("null");
    } else {
      sb.append(this.operands);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("distinct:");
    sb.append(this.distinct);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AggTypeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AggTypeStandardScheme getScheme() {
      return new AggTypeStandardScheme();
    }
  }

  private static class AggTypeStandardScheme extends org.apache.thrift.scheme.StandardScheme<AggType> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, AggType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agg = iprot.readString();
              struct.setAggIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERANDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.operands = new java.util.ArrayList<java.lang.Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.operands.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setOperandsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISTINCT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.distinct = iprot.readBool();
              struct.setDistinctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, AggType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agg != null) {
        oprot.writeFieldBegin(AGG_FIELD_DESC);
        oprot.writeString(struct.agg);
        oprot.writeFieldEnd();
      }
      if (struct.operands != null) {
        oprot.writeFieldBegin(OPERANDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.operands.size()));
          for (long _iter3 : struct.operands)
          {
            oprot.writeI64(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISTINCT_FIELD_DESC);
      oprot.writeBool(struct.distinct);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AggTypeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public AggTypeTupleScheme getScheme() {
      return new AggTypeTupleScheme();
    }
  }

  private static class AggTypeTupleScheme extends org.apache.thrift.scheme.TupleScheme<AggType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AggType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAgg()) {
        optionals.set(0);
      }
      if (struct.isSetOperands()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetDistinct()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetAgg()) {
        oprot.writeString(struct.agg);
      }
      if (struct.isSetOperands()) {
        {
          oprot.writeI32(struct.operands.size());
          for (long _iter4 : struct.operands)
          {
            oprot.writeI64(_iter4);
          }
        }
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetDistinct()) {
        oprot.writeBool(struct.distinct);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AggType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.agg = iprot.readString();
        struct.setAggIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.operands = new java.util.ArrayList<java.lang.Long>(_list5.size);
          long _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readI64();
            struct.operands.add(_elem6);
          }
        }
        struct.setOperandsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.distinct = iprot.readBool();
        struct.setDistinctIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

