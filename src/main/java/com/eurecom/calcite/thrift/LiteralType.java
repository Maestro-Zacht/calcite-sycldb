/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.eurecom.calcite.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-09-03")
public class LiteralType implements org.apache.thrift.TBase<LiteralType, LiteralType._Fields>, java.io.Serializable, Cloneable, Comparable<LiteralType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LiteralType");

  private static final org.apache.thrift.protocol.TField LITERAL_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("literalOption", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RANGE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeSet", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LiteralTypeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LiteralTypeTupleSchemeFactory();

  /**
   * 
   * @see LiteralOption
   */
  public @org.apache.thrift.annotation.Nullable LiteralOption literalOption; // required
  public long value; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> rangeSet; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see LiteralOption
     */
    LITERAL_OPTION((short)1, "literalOption"),
    VALUE((short)2, "value"),
    RANGE_SET((short)3, "rangeSet");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LITERAL_OPTION
          return LITERAL_OPTION;
        case 2: // VALUE
          return VALUE;
        case 3: // RANGE_SET
          return RANGE_SET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VALUE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.VALUE,_Fields.RANGE_SET};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LITERAL_OPTION, new org.apache.thrift.meta_data.FieldMetaData("literalOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LiteralOption.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RANGE_SET, new org.apache.thrift.meta_data.FieldMetaData("rangeSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LiteralType.class, metaDataMap);
  }

  public LiteralType() {
  }

  public LiteralType(
    LiteralOption literalOption)
  {
    this();
    this.literalOption = literalOption;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LiteralType(LiteralType other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLiteralOption()) {
      this.literalOption = other.literalOption;
    }
    this.value = other.value;
    if (other.isSetRangeSet()) {
      java.util.List<java.util.List<java.lang.String>> __this__rangeSet = new java.util.ArrayList<java.util.List<java.lang.String>>(other.rangeSet.size());
      for (java.util.List<java.lang.String> other_element : other.rangeSet) {
        java.util.List<java.lang.String> __this__rangeSet_copy = new java.util.ArrayList<java.lang.String>(other_element);
        __this__rangeSet.add(__this__rangeSet_copy);
      }
      this.rangeSet = __this__rangeSet;
    }
  }

  @Override
  public LiteralType deepCopy() {
    return new LiteralType(this);
  }

  @Override
  public void clear() {
    this.literalOption = null;
    setValueIsSet(false);
    this.value = 0;
    this.rangeSet = null;
  }

  /**
   * 
   * @see LiteralOption
   */
  @org.apache.thrift.annotation.Nullable
  public LiteralOption getLiteralOption() {
    return this.literalOption;
  }

  /**
   * 
   * @see LiteralOption
   */
  public LiteralType setLiteralOption(@org.apache.thrift.annotation.Nullable LiteralOption literalOption) {
    this.literalOption = literalOption;
    return this;
  }

  public void unsetLiteralOption() {
    this.literalOption = null;
  }

  /** Returns true if field literalOption is set (has been assigned a value) and false otherwise */
  public boolean isSetLiteralOption() {
    return this.literalOption != null;
  }

  public void setLiteralOptionIsSet(boolean value) {
    if (!value) {
      this.literalOption = null;
    }
  }

  public long getValue() {
    return this.value;
  }

  public LiteralType setValue(long value) {
    this.value = value;
    setValueIsSet(true);
    return this;
  }

  public void unsetValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  public void setValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
  }

  public int getRangeSetSize() {
    return (this.rangeSet == null) ? 0 : this.rangeSet.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.String>> getRangeSetIterator() {
    return (this.rangeSet == null) ? null : this.rangeSet.iterator();
  }

  public void addToRangeSet(java.util.List<java.lang.String> elem) {
    if (this.rangeSet == null) {
      this.rangeSet = new java.util.ArrayList<java.util.List<java.lang.String>>();
    }
    this.rangeSet.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.String>> getRangeSet() {
    return this.rangeSet;
  }

  public LiteralType setRangeSet(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> rangeSet) {
    this.rangeSet = rangeSet;
    return this;
  }

  public void unsetRangeSet() {
    this.rangeSet = null;
  }

  /** Returns true if field rangeSet is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeSet() {
    return this.rangeSet != null;
  }

  public void setRangeSetIsSet(boolean value) {
    if (!value) {
      this.rangeSet = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LITERAL_OPTION:
      if (value == null) {
        unsetLiteralOption();
      } else {
        setLiteralOption((LiteralOption)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((java.lang.Long)value);
      }
      break;

    case RANGE_SET:
      if (value == null) {
        unsetRangeSet();
      } else {
        setRangeSet((java.util.List<java.util.List<java.lang.String>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LITERAL_OPTION:
      return getLiteralOption();

    case VALUE:
      return getValue();

    case RANGE_SET:
      return getRangeSet();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LITERAL_OPTION:
      return isSetLiteralOption();
    case VALUE:
      return isSetValue();
    case RANGE_SET:
      return isSetRangeSet();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof LiteralType)
      return this.equals((LiteralType)that);
    return false;
  }

  public boolean equals(LiteralType that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_literalOption = true && this.isSetLiteralOption();
    boolean that_present_literalOption = true && that.isSetLiteralOption();
    if (this_present_literalOption || that_present_literalOption) {
      if (!(this_present_literalOption && that_present_literalOption))
        return false;
      if (!this.literalOption.equals(that.literalOption))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (this.value != that.value)
        return false;
    }

    boolean this_present_rangeSet = true && this.isSetRangeSet();
    boolean that_present_rangeSet = true && that.isSetRangeSet();
    if (this_present_rangeSet || that_present_rangeSet) {
      if (!(this_present_rangeSet && that_present_rangeSet))
        return false;
      if (!this.rangeSet.equals(that.rangeSet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLiteralOption()) ? 131071 : 524287);
    if (isSetLiteralOption())
      hashCode = hashCode * 8191 + literalOption.getValue();

    hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
    if (isSetValue())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(value);

    hashCode = hashCode * 8191 + ((isSetRangeSet()) ? 131071 : 524287);
    if (isSetRangeSet())
      hashCode = hashCode * 8191 + rangeSet.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LiteralType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLiteralOption(), other.isSetLiteralOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiteralOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.literalOption, other.literalOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRangeSet(), other.isSetRangeSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeSet, other.rangeSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LiteralType(");
    boolean first = true;

    sb.append("literalOption:");
    if (this.literalOption == null) {
      sb.append("null");
    } else {
      sb.append(this.literalOption);
    }
    first = false;
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      sb.append(this.value);
      first = false;
    }
    if (isSetRangeSet()) {
      if (!first) sb.append(", ");
      sb.append("rangeSet:");
      if (this.rangeSet == null) {
        sb.append("null");
      } else {
        sb.append(this.rangeSet);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LiteralTypeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public LiteralTypeStandardScheme getScheme() {
      return new LiteralTypeStandardScheme();
    }
  }

  private static class LiteralTypeStandardScheme extends org.apache.thrift.scheme.StandardScheme<LiteralType> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, LiteralType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LITERAL_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.literalOption = com.eurecom.calcite.thrift.LiteralOption.findByValue(iprot.readI32());
              struct.setLiteralOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.value = iprot.readI64();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RANGE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.rangeSet = new java.util.ArrayList<java.util.List<java.lang.String>>(_list8.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  {
                    org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                    _elem9 = new java.util.ArrayList<java.lang.String>(_list11.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem12;
                    for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                    {
                      _elem12 = iprot.readString();
                      _elem9.add(_elem12);
                    }
                    iprot.readListEnd();
                  }
                  struct.rangeSet.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setRangeSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, LiteralType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.literalOption != null) {
        oprot.writeFieldBegin(LITERAL_OPTION_FIELD_DESC);
        oprot.writeI32(struct.literalOption.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetValue()) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeI64(struct.value);
        oprot.writeFieldEnd();
      }
      if (struct.rangeSet != null) {
        if (struct.isSetRangeSet()) {
          oprot.writeFieldBegin(RANGE_SET_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.rangeSet.size()));
            for (java.util.List<java.lang.String> _iter14 : struct.rangeSet)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter14.size()));
                for (java.lang.String _iter15 : _iter14)
                {
                  oprot.writeString(_iter15);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LiteralTypeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public LiteralTypeTupleScheme getScheme() {
      return new LiteralTypeTupleScheme();
    }
  }

  private static class LiteralTypeTupleScheme extends org.apache.thrift.scheme.TupleScheme<LiteralType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LiteralType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLiteralOption()) {
        optionals.set(0);
      }
      if (struct.isSetValue()) {
        optionals.set(1);
      }
      if (struct.isSetRangeSet()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLiteralOption()) {
        oprot.writeI32(struct.literalOption.getValue());
      }
      if (struct.isSetValue()) {
        oprot.writeI64(struct.value);
      }
      if (struct.isSetRangeSet()) {
        {
          oprot.writeI32(struct.rangeSet.size());
          for (java.util.List<java.lang.String> _iter16 : struct.rangeSet)
          {
            {
              oprot.writeI32(_iter16.size());
              for (java.lang.String _iter17 : _iter16)
              {
                oprot.writeString(_iter17);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LiteralType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.literalOption = com.eurecom.calcite.thrift.LiteralOption.findByValue(iprot.readI32());
        struct.setLiteralOptionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.value = iprot.readI64();
        struct.setValueIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list18 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
          struct.rangeSet = new java.util.ArrayList<java.util.List<java.lang.String>>(_list18.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            {
              org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
              _elem19 = new java.util.ArrayList<java.lang.String>(_list21.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _elem22;
              for (int _i23 = 0; _i23 < _list21.size; ++_i23)
              {
                _elem22 = iprot.readString();
                _elem19.add(_elem22);
              }
            }
            struct.rangeSet.add(_elem19);
          }
        }
        struct.setRangeSetIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

