/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.eurecom.calcite.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-05-09")
public class ExprType implements org.apache.thrift.TBase<ExprType, ExprType._Fields>, java.io.Serializable, Cloneable, Comparable<ExprType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExprType");

  private static final org.apache.thrift.protocol.TField EXPR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("exprType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("input", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OPERANDS_FIELD_DESC = new org.apache.thrift.protocol.TField("operands", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField LITERAL_FIELD_DESC = new org.apache.thrift.protocol.TField("literal", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExprTypeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExprTypeTupleSchemeFactory();

  /**
   * 
   * @see ExprOption
   */
  public @org.apache.thrift.annotation.Nullable ExprOption exprType; // required
  public long input; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String op; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<ExprType> operands; // optional
  public @org.apache.thrift.annotation.Nullable LiteralType literal; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String type; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ExprOption
     */
    EXPR_TYPE((short)1, "exprType"),
    INPUT((short)2, "input"),
    NAME((short)3, "name"),
    OP((short)4, "op"),
    OPERANDS((short)5, "operands"),
    LITERAL((short)6, "literal"),
    TYPE((short)7, "type");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPR_TYPE
          return EXPR_TYPE;
        case 2: // INPUT
          return INPUT;
        case 3: // NAME
          return NAME;
        case 4: // OP
          return OP;
        case 5: // OPERANDS
          return OPERANDS;
        case 6: // LITERAL
          return LITERAL;
        case 7: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INPUT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INPUT,_Fields.NAME,_Fields.OP,_Fields.OPERANDS,_Fields.LITERAL,_Fields.TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("exprType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ExprOption.class)));
    tmpMap.put(_Fields.INPUT, new org.apache.thrift.meta_data.FieldMetaData("input", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERANDS, new org.apache.thrift.meta_data.FieldMetaData("operands", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExprType.class))));
    tmpMap.put(_Fields.LITERAL, new org.apache.thrift.meta_data.FieldMetaData("literal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LiteralType.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExprType.class, metaDataMap);
  }

  public ExprType() {
  }

  public ExprType(
    ExprOption exprType)
  {
    this();
    this.exprType = exprType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExprType(ExprType other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetExprType()) {
      this.exprType = other.exprType;
    }
    this.input = other.input;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetOp()) {
      this.op = other.op;
    }
    if (other.isSetOperands()) {
      java.util.List<ExprType> __this__operands = new java.util.ArrayList<ExprType>(other.operands.size());
      for (ExprType other_element : other.operands) {
        __this__operands.add(new ExprType(other_element));
      }
      this.operands = __this__operands;
    }
    if (other.isSetLiteral()) {
      this.literal = new LiteralType(other.literal);
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
  }

  @Override
  public ExprType deepCopy() {
    return new ExprType(this);
  }

  @Override
  public void clear() {
    this.exprType = null;
    setInputIsSet(false);
    this.input = 0;
    this.name = null;
    this.op = null;
    this.operands = null;
    this.literal = null;
    this.type = null;
  }

  /**
   * 
   * @see ExprOption
   */
  @org.apache.thrift.annotation.Nullable
  public ExprOption getExprType() {
    return this.exprType;
  }

  /**
   * 
   * @see ExprOption
   */
  public ExprType setExprType(@org.apache.thrift.annotation.Nullable ExprOption exprType) {
    this.exprType = exprType;
    return this;
  }

  public void unsetExprType() {
    this.exprType = null;
  }

  /** Returns true if field exprType is set (has been assigned a value) and false otherwise */
  public boolean isSetExprType() {
    return this.exprType != null;
  }

  public void setExprTypeIsSet(boolean value) {
    if (!value) {
      this.exprType = null;
    }
  }

  public long getInput() {
    return this.input;
  }

  public ExprType setInput(long input) {
    this.input = input;
    setInputIsSet(true);
    return this;
  }

  public void unsetInput() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INPUT_ISSET_ID);
  }

  /** Returns true if field input is set (has been assigned a value) and false otherwise */
  public boolean isSetInput() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INPUT_ISSET_ID);
  }

  public void setInputIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INPUT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public ExprType setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOp() {
    return this.op;
  }

  public ExprType setOp(@org.apache.thrift.annotation.Nullable java.lang.String op) {
    this.op = op;
    return this;
  }

  public void unsetOp() {
    this.op = null;
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean isSetOp() {
    return this.op != null;
  }

  public void setOpIsSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  public int getOperandsSize() {
    return (this.operands == null) ? 0 : this.operands.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ExprType> getOperandsIterator() {
    return (this.operands == null) ? null : this.operands.iterator();
  }

  public void addToOperands(ExprType elem) {
    if (this.operands == null) {
      this.operands = new java.util.ArrayList<ExprType>();
    }
    this.operands.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ExprType> getOperands() {
    return this.operands;
  }

  public ExprType setOperands(@org.apache.thrift.annotation.Nullable java.util.List<ExprType> operands) {
    this.operands = operands;
    return this;
  }

  public void unsetOperands() {
    this.operands = null;
  }

  /** Returns true if field operands is set (has been assigned a value) and false otherwise */
  public boolean isSetOperands() {
    return this.operands != null;
  }

  public void setOperandsIsSet(boolean value) {
    if (!value) {
      this.operands = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public LiteralType getLiteral() {
    return this.literal;
  }

  public ExprType setLiteral(@org.apache.thrift.annotation.Nullable LiteralType literal) {
    this.literal = literal;
    return this;
  }

  public void unsetLiteral() {
    this.literal = null;
  }

  /** Returns true if field literal is set (has been assigned a value) and false otherwise */
  public boolean isSetLiteral() {
    return this.literal != null;
  }

  public void setLiteralIsSet(boolean value) {
    if (!value) {
      this.literal = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getType() {
    return this.type;
  }

  public ExprType setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case EXPR_TYPE:
      if (value == null) {
        unsetExprType();
      } else {
        setExprType((ExprOption)value);
      }
      break;

    case INPUT:
      if (value == null) {
        unsetInput();
      } else {
        setInput((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case OP:
      if (value == null) {
        unsetOp();
      } else {
        setOp((java.lang.String)value);
      }
      break;

    case OPERANDS:
      if (value == null) {
        unsetOperands();
      } else {
        setOperands((java.util.List<ExprType>)value);
      }
      break;

    case LITERAL:
      if (value == null) {
        unsetLiteral();
      } else {
        setLiteral((LiteralType)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPR_TYPE:
      return getExprType();

    case INPUT:
      return getInput();

    case NAME:
      return getName();

    case OP:
      return getOp();

    case OPERANDS:
      return getOperands();

    case LITERAL:
      return getLiteral();

    case TYPE:
      return getType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EXPR_TYPE:
      return isSetExprType();
    case INPUT:
      return isSetInput();
    case NAME:
      return isSetName();
    case OP:
      return isSetOp();
    case OPERANDS:
      return isSetOperands();
    case LITERAL:
      return isSetLiteral();
    case TYPE:
      return isSetType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ExprType)
      return this.equals((ExprType)that);
    return false;
  }

  public boolean equals(ExprType that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_exprType = true && this.isSetExprType();
    boolean that_present_exprType = true && that.isSetExprType();
    if (this_present_exprType || that_present_exprType) {
      if (!(this_present_exprType && that_present_exprType))
        return false;
      if (!this.exprType.equals(that.exprType))
        return false;
    }

    boolean this_present_input = true && this.isSetInput();
    boolean that_present_input = true && that.isSetInput();
    if (this_present_input || that_present_input) {
      if (!(this_present_input && that_present_input))
        return false;
      if (this.input != that.input)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_op = true && this.isSetOp();
    boolean that_present_op = true && that.isSetOp();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!this.op.equals(that.op))
        return false;
    }

    boolean this_present_operands = true && this.isSetOperands();
    boolean that_present_operands = true && that.isSetOperands();
    if (this_present_operands || that_present_operands) {
      if (!(this_present_operands && that_present_operands))
        return false;
      if (!this.operands.equals(that.operands))
        return false;
    }

    boolean this_present_literal = true && this.isSetLiteral();
    boolean that_present_literal = true && that.isSetLiteral();
    if (this_present_literal || that_present_literal) {
      if (!(this_present_literal && that_present_literal))
        return false;
      if (!this.literal.equals(that.literal))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetExprType()) ? 131071 : 524287);
    if (isSetExprType())
      hashCode = hashCode * 8191 + exprType.getValue();

    hashCode = hashCode * 8191 + ((isSetInput()) ? 131071 : 524287);
    if (isSetInput())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(input);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetOp()) ? 131071 : 524287);
    if (isSetOp())
      hashCode = hashCode * 8191 + op.hashCode();

    hashCode = hashCode * 8191 + ((isSetOperands()) ? 131071 : 524287);
    if (isSetOperands())
      hashCode = hashCode * 8191 + operands.hashCode();

    hashCode = hashCode * 8191 + ((isSetLiteral()) ? 131071 : 524287);
    if (isSetLiteral())
      hashCode = hashCode * 8191 + literal.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ExprType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetExprType(), other.isSetExprType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExprType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exprType, other.exprType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInput(), other.isSetInput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input, other.input);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOp(), other.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, other.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOperands(), other.isSetOperands());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperands()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operands, other.operands);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLiteral(), other.isSetLiteral());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiteral()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.literal, other.literal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ExprType(");
    boolean first = true;

    sb.append("exprType:");
    if (this.exprType == null) {
      sb.append("null");
    } else {
      sb.append(this.exprType);
    }
    first = false;
    if (isSetInput()) {
      if (!first) sb.append(", ");
      sb.append("input:");
      sb.append(this.input);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetOp()) {
      if (!first) sb.append(", ");
      sb.append("op:");
      if (this.op == null) {
        sb.append("null");
      } else {
        sb.append(this.op);
      }
      first = false;
    }
    if (isSetOperands()) {
      if (!first) sb.append(", ");
      sb.append("operands:");
      if (this.operands == null) {
        sb.append("null");
      } else {
        sb.append(this.operands);
      }
      first = false;
    }
    if (isSetLiteral()) {
      if (!first) sb.append(", ");
      sb.append("literal:");
      if (this.literal == null) {
        sb.append("null");
      } else {
        sb.append(this.literal);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (literal != null) {
      literal.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExprTypeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ExprTypeStandardScheme getScheme() {
      return new ExprTypeStandardScheme();
    }
  }

  private static class ExprTypeStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExprType> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, ExprType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exprType = com.eurecom.calcite.thrift.ExprOption.findByValue(iprot.readI32());
              struct.setExprTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.input = iprot.readI64();
              struct.setInputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.op = iprot.readString();
              struct.setOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPERANDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.operands = new java.util.ArrayList<ExprType>(_list24.size);
                @org.apache.thrift.annotation.Nullable ExprType _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new ExprType();
                  _elem25.read(iprot);
                  struct.operands.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setOperandsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LITERAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.literal = new LiteralType();
              struct.literal.read(iprot);
              struct.setLiteralIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, ExprType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.exprType != null) {
        oprot.writeFieldBegin(EXPR_TYPE_FIELD_DESC);
        oprot.writeI32(struct.exprType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetInput()) {
        oprot.writeFieldBegin(INPUT_FIELD_DESC);
        oprot.writeI64(struct.input);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.op != null) {
        if (struct.isSetOp()) {
          oprot.writeFieldBegin(OP_FIELD_DESC);
          oprot.writeString(struct.op);
          oprot.writeFieldEnd();
        }
      }
      if (struct.operands != null) {
        if (struct.isSetOperands()) {
          oprot.writeFieldBegin(OPERANDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.operands.size()));
            for (ExprType _iter27 : struct.operands)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.literal != null) {
        if (struct.isSetLiteral()) {
          oprot.writeFieldBegin(LITERAL_FIELD_DESC);
          struct.literal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExprTypeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ExprTypeTupleScheme getScheme() {
      return new ExprTypeTupleScheme();
    }
  }

  private static class ExprTypeTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExprType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExprType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetExprType()) {
        optionals.set(0);
      }
      if (struct.isSetInput()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetOp()) {
        optionals.set(3);
      }
      if (struct.isSetOperands()) {
        optionals.set(4);
      }
      if (struct.isSetLiteral()) {
        optionals.set(5);
      }
      if (struct.isSetType()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetExprType()) {
        oprot.writeI32(struct.exprType.getValue());
      }
      if (struct.isSetInput()) {
        oprot.writeI64(struct.input);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetOp()) {
        oprot.writeString(struct.op);
      }
      if (struct.isSetOperands()) {
        {
          oprot.writeI32(struct.operands.size());
          for (ExprType _iter28 : struct.operands)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetLiteral()) {
        struct.literal.write(oprot);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExprType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.exprType = com.eurecom.calcite.thrift.ExprOption.findByValue(iprot.readI32());
        struct.setExprTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.input = iprot.readI64();
        struct.setInputIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.op = iprot.readString();
        struct.setOpIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.operands = new java.util.ArrayList<ExprType>(_list29.size);
          @org.apache.thrift.annotation.Nullable ExprType _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new ExprType();
            _elem30.read(iprot);
            struct.operands.add(_elem30);
          }
        }
        struct.setOperandsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.literal = new LiteralType();
        struct.literal.read(iprot);
        struct.setLiteralIsSet(true);
      }
      if (incoming.get(6)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

