/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.eurecom.calcite.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-05-29")
public class RelNode implements org.apache.thrift.TBase<RelNode, RelNode._Fields>, java.io.Serializable, Cloneable, Comparable<RelNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RelNode");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField REL_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("relOp", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("tables", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("inputs", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField JOIN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("joinType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("exprs", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField AGGS_FIELD_DESC = new org.apache.thrift.protocol.TField("aggs", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RelNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RelNodeTupleSchemeFactory();

  public long id; // required
  /**
   * 
   * @see RelNodeType
   */
  public @org.apache.thrift.annotation.Nullable RelNodeType relOp; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> tables; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> inputs; // optional
  public @org.apache.thrift.annotation.Nullable ExprType condition; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String joinType; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> fields; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<ExprType> exprs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> group; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<AggType> aggs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see RelNodeType
     */
    REL_OP((short)2, "relOp"),
    TABLES((short)3, "tables"),
    INPUTS((short)4, "inputs"),
    CONDITION((short)5, "condition"),
    JOIN_TYPE((short)6, "joinType"),
    FIELDS((short)7, "fields"),
    EXPRS((short)8, "exprs"),
    GROUP((short)9, "group"),
    AGGS((short)10, "aggs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // REL_OP
          return REL_OP;
        case 3: // TABLES
          return TABLES;
        case 4: // INPUTS
          return INPUTS;
        case 5: // CONDITION
          return CONDITION;
        case 6: // JOIN_TYPE
          return JOIN_TYPE;
        case 7: // FIELDS
          return FIELDS;
        case 8: // EXPRS
          return EXPRS;
        case 9: // GROUP
          return GROUP;
        case 10: // AGGS
          return AGGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TABLES,_Fields.INPUTS,_Fields.CONDITION,_Fields.JOIN_TYPE,_Fields.FIELDS,_Fields.EXPRS,_Fields.GROUP,_Fields.AGGS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REL_OP, new org.apache.thrift.meta_data.FieldMetaData("relOp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RelNodeType.class)));
    tmpMap.put(_Fields.TABLES, new org.apache.thrift.meta_data.FieldMetaData("tables", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INPUTS, new org.apache.thrift.meta_data.FieldMetaData("inputs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExprType.class)));
    tmpMap.put(_Fields.JOIN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("joinType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXPRS, new org.apache.thrift.meta_data.FieldMetaData("exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExprType.class))));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.AGGS, new org.apache.thrift.meta_data.FieldMetaData("aggs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AggType.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RelNode.class, metaDataMap);
  }

  public RelNode() {
  }

  public RelNode(
    long id,
    RelNodeType relOp)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.relOp = relOp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RelNode(RelNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetRelOp()) {
      this.relOp = other.relOp;
    }
    if (other.isSetTables()) {
      java.util.List<java.lang.String> __this__tables = new java.util.ArrayList<java.lang.String>(other.tables);
      this.tables = __this__tables;
    }
    if (other.isSetInputs()) {
      java.util.List<java.lang.Long> __this__inputs = new java.util.ArrayList<java.lang.Long>(other.inputs);
      this.inputs = __this__inputs;
    }
    if (other.isSetCondition()) {
      this.condition = new ExprType(other.condition);
    }
    if (other.isSetJoinType()) {
      this.joinType = other.joinType;
    }
    if (other.isSetFields()) {
      java.util.List<java.lang.String> __this__fields = new java.util.ArrayList<java.lang.String>(other.fields);
      this.fields = __this__fields;
    }
    if (other.isSetExprs()) {
      java.util.List<ExprType> __this__exprs = new java.util.ArrayList<ExprType>(other.exprs.size());
      for (ExprType other_element : other.exprs) {
        __this__exprs.add(new ExprType(other_element));
      }
      this.exprs = __this__exprs;
    }
    if (other.isSetGroup()) {
      java.util.List<java.lang.Long> __this__group = new java.util.ArrayList<java.lang.Long>(other.group);
      this.group = __this__group;
    }
    if (other.isSetAggs()) {
      java.util.List<AggType> __this__aggs = new java.util.ArrayList<AggType>(other.aggs.size());
      for (AggType other_element : other.aggs) {
        __this__aggs.add(new AggType(other_element));
      }
      this.aggs = __this__aggs;
    }
  }

  @Override
  public RelNode deepCopy() {
    return new RelNode(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.relOp = null;
    this.tables = null;
    this.inputs = null;
    this.condition = null;
    this.joinType = null;
    this.fields = null;
    this.exprs = null;
    this.group = null;
    this.aggs = null;
  }

  public long getId() {
    return this.id;
  }

  public RelNode setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 
   * @see RelNodeType
   */
  @org.apache.thrift.annotation.Nullable
  public RelNodeType getRelOp() {
    return this.relOp;
  }

  /**
   * 
   * @see RelNodeType
   */
  public RelNode setRelOp(@org.apache.thrift.annotation.Nullable RelNodeType relOp) {
    this.relOp = relOp;
    return this;
  }

  public void unsetRelOp() {
    this.relOp = null;
  }

  /** Returns true if field relOp is set (has been assigned a value) and false otherwise */
  public boolean isSetRelOp() {
    return this.relOp != null;
  }

  public void setRelOpIsSet(boolean value) {
    if (!value) {
      this.relOp = null;
    }
  }

  public int getTablesSize() {
    return (this.tables == null) ? 0 : this.tables.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getTablesIterator() {
    return (this.tables == null) ? null : this.tables.iterator();
  }

  public void addToTables(java.lang.String elem) {
    if (this.tables == null) {
      this.tables = new java.util.ArrayList<java.lang.String>();
    }
    this.tables.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getTables() {
    return this.tables;
  }

  public RelNode setTables(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> tables) {
    this.tables = tables;
    return this;
  }

  public void unsetTables() {
    this.tables = null;
  }

  /** Returns true if field tables is set (has been assigned a value) and false otherwise */
  public boolean isSetTables() {
    return this.tables != null;
  }

  public void setTablesIsSet(boolean value) {
    if (!value) {
      this.tables = null;
    }
  }

  public int getInputsSize() {
    return (this.inputs == null) ? 0 : this.inputs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getInputsIterator() {
    return (this.inputs == null) ? null : this.inputs.iterator();
  }

  public void addToInputs(long elem) {
    if (this.inputs == null) {
      this.inputs = new java.util.ArrayList<java.lang.Long>();
    }
    this.inputs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getInputs() {
    return this.inputs;
  }

  public RelNode setInputs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> inputs) {
    this.inputs = inputs;
    return this;
  }

  public void unsetInputs() {
    this.inputs = null;
  }

  /** Returns true if field inputs is set (has been assigned a value) and false otherwise */
  public boolean isSetInputs() {
    return this.inputs != null;
  }

  public void setInputsIsSet(boolean value) {
    if (!value) {
      this.inputs = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ExprType getCondition() {
    return this.condition;
  }

  public RelNode setCondition(@org.apache.thrift.annotation.Nullable ExprType condition) {
    this.condition = condition;
    return this;
  }

  public void unsetCondition() {
    this.condition = null;
  }

  /** Returns true if field condition is set (has been assigned a value) and false otherwise */
  public boolean isSetCondition() {
    return this.condition != null;
  }

  public void setConditionIsSet(boolean value) {
    if (!value) {
      this.condition = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJoinType() {
    return this.joinType;
  }

  public RelNode setJoinType(@org.apache.thrift.annotation.Nullable java.lang.String joinType) {
    this.joinType = joinType;
    return this;
  }

  public void unsetJoinType() {
    this.joinType = null;
  }

  /** Returns true if field joinType is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinType() {
    return this.joinType != null;
  }

  public void setJoinTypeIsSet(boolean value) {
    if (!value) {
      this.joinType = null;
    }
  }

  public int getFieldsSize() {
    return (this.fields == null) ? 0 : this.fields.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getFieldsIterator() {
    return (this.fields == null) ? null : this.fields.iterator();
  }

  public void addToFields(java.lang.String elem) {
    if (this.fields == null) {
      this.fields = new java.util.ArrayList<java.lang.String>();
    }
    this.fields.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getFields() {
    return this.fields;
  }

  public RelNode setFields(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> fields) {
    this.fields = fields;
    return this;
  }

  public void unsetFields() {
    this.fields = null;
  }

  /** Returns true if field fields is set (has been assigned a value) and false otherwise */
  public boolean isSetFields() {
    return this.fields != null;
  }

  public void setFieldsIsSet(boolean value) {
    if (!value) {
      this.fields = null;
    }
  }

  public int getExprsSize() {
    return (this.exprs == null) ? 0 : this.exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ExprType> getExprsIterator() {
    return (this.exprs == null) ? null : this.exprs.iterator();
  }

  public void addToExprs(ExprType elem) {
    if (this.exprs == null) {
      this.exprs = new java.util.ArrayList<ExprType>();
    }
    this.exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ExprType> getExprs() {
    return this.exprs;
  }

  public RelNode setExprs(@org.apache.thrift.annotation.Nullable java.util.List<ExprType> exprs) {
    this.exprs = exprs;
    return this;
  }

  public void unsetExprs() {
    this.exprs = null;
  }

  /** Returns true if field exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetExprs() {
    return this.exprs != null;
  }

  public void setExprsIsSet(boolean value) {
    if (!value) {
      this.exprs = null;
    }
  }

  public int getGroupSize() {
    return (this.group == null) ? 0 : this.group.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getGroupIterator() {
    return (this.group == null) ? null : this.group.iterator();
  }

  public void addToGroup(long elem) {
    if (this.group == null) {
      this.group = new java.util.ArrayList<java.lang.Long>();
    }
    this.group.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getGroup() {
    return this.group;
  }

  public RelNode setGroup(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public int getAggsSize() {
    return (this.aggs == null) ? 0 : this.aggs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<AggType> getAggsIterator() {
    return (this.aggs == null) ? null : this.aggs.iterator();
  }

  public void addToAggs(AggType elem) {
    if (this.aggs == null) {
      this.aggs = new java.util.ArrayList<AggType>();
    }
    this.aggs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<AggType> getAggs() {
    return this.aggs;
  }

  public RelNode setAggs(@org.apache.thrift.annotation.Nullable java.util.List<AggType> aggs) {
    this.aggs = aggs;
    return this;
  }

  public void unsetAggs() {
    this.aggs = null;
  }

  /** Returns true if field aggs is set (has been assigned a value) and false otherwise */
  public boolean isSetAggs() {
    return this.aggs != null;
  }

  public void setAggsIsSet(boolean value) {
    if (!value) {
      this.aggs = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case REL_OP:
      if (value == null) {
        unsetRelOp();
      } else {
        setRelOp((RelNodeType)value);
      }
      break;

    case TABLES:
      if (value == null) {
        unsetTables();
      } else {
        setTables((java.util.List<java.lang.String>)value);
      }
      break;

    case INPUTS:
      if (value == null) {
        unsetInputs();
      } else {
        setInputs((java.util.List<java.lang.Long>)value);
      }
      break;

    case CONDITION:
      if (value == null) {
        unsetCondition();
      } else {
        setCondition((ExprType)value);
      }
      break;

    case JOIN_TYPE:
      if (value == null) {
        unsetJoinType();
      } else {
        setJoinType((java.lang.String)value);
      }
      break;

    case FIELDS:
      if (value == null) {
        unsetFields();
      } else {
        setFields((java.util.List<java.lang.String>)value);
      }
      break;

    case EXPRS:
      if (value == null) {
        unsetExprs();
      } else {
        setExprs((java.util.List<ExprType>)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((java.util.List<java.lang.Long>)value);
      }
      break;

    case AGGS:
      if (value == null) {
        unsetAggs();
      } else {
        setAggs((java.util.List<AggType>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case REL_OP:
      return getRelOp();

    case TABLES:
      return getTables();

    case INPUTS:
      return getInputs();

    case CONDITION:
      return getCondition();

    case JOIN_TYPE:
      return getJoinType();

    case FIELDS:
      return getFields();

    case EXPRS:
      return getExprs();

    case GROUP:
      return getGroup();

    case AGGS:
      return getAggs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case REL_OP:
      return isSetRelOp();
    case TABLES:
      return isSetTables();
    case INPUTS:
      return isSetInputs();
    case CONDITION:
      return isSetCondition();
    case JOIN_TYPE:
      return isSetJoinType();
    case FIELDS:
      return isSetFields();
    case EXPRS:
      return isSetExprs();
    case GROUP:
      return isSetGroup();
    case AGGS:
      return isSetAggs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof RelNode)
      return this.equals((RelNode)that);
    return false;
  }

  public boolean equals(RelNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_relOp = true && this.isSetRelOp();
    boolean that_present_relOp = true && that.isSetRelOp();
    if (this_present_relOp || that_present_relOp) {
      if (!(this_present_relOp && that_present_relOp))
        return false;
      if (!this.relOp.equals(that.relOp))
        return false;
    }

    boolean this_present_tables = true && this.isSetTables();
    boolean that_present_tables = true && that.isSetTables();
    if (this_present_tables || that_present_tables) {
      if (!(this_present_tables && that_present_tables))
        return false;
      if (!this.tables.equals(that.tables))
        return false;
    }

    boolean this_present_inputs = true && this.isSetInputs();
    boolean that_present_inputs = true && that.isSetInputs();
    if (this_present_inputs || that_present_inputs) {
      if (!(this_present_inputs && that_present_inputs))
        return false;
      if (!this.inputs.equals(that.inputs))
        return false;
    }

    boolean this_present_condition = true && this.isSetCondition();
    boolean that_present_condition = true && that.isSetCondition();
    if (this_present_condition || that_present_condition) {
      if (!(this_present_condition && that_present_condition))
        return false;
      if (!this.condition.equals(that.condition))
        return false;
    }

    boolean this_present_joinType = true && this.isSetJoinType();
    boolean that_present_joinType = true && that.isSetJoinType();
    if (this_present_joinType || that_present_joinType) {
      if (!(this_present_joinType && that_present_joinType))
        return false;
      if (!this.joinType.equals(that.joinType))
        return false;
    }

    boolean this_present_fields = true && this.isSetFields();
    boolean that_present_fields = true && that.isSetFields();
    if (this_present_fields || that_present_fields) {
      if (!(this_present_fields && that_present_fields))
        return false;
      if (!this.fields.equals(that.fields))
        return false;
    }

    boolean this_present_exprs = true && this.isSetExprs();
    boolean that_present_exprs = true && that.isSetExprs();
    if (this_present_exprs || that_present_exprs) {
      if (!(this_present_exprs && that_present_exprs))
        return false;
      if (!this.exprs.equals(that.exprs))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_aggs = true && this.isSetAggs();
    boolean that_present_aggs = true && that.isSetAggs();
    if (this_present_aggs || that_present_aggs) {
      if (!(this_present_aggs && that_present_aggs))
        return false;
      if (!this.aggs.equals(that.aggs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetRelOp()) ? 131071 : 524287);
    if (isSetRelOp())
      hashCode = hashCode * 8191 + relOp.getValue();

    hashCode = hashCode * 8191 + ((isSetTables()) ? 131071 : 524287);
    if (isSetTables())
      hashCode = hashCode * 8191 + tables.hashCode();

    hashCode = hashCode * 8191 + ((isSetInputs()) ? 131071 : 524287);
    if (isSetInputs())
      hashCode = hashCode * 8191 + inputs.hashCode();

    hashCode = hashCode * 8191 + ((isSetCondition()) ? 131071 : 524287);
    if (isSetCondition())
      hashCode = hashCode * 8191 + condition.hashCode();

    hashCode = hashCode * 8191 + ((isSetJoinType()) ? 131071 : 524287);
    if (isSetJoinType())
      hashCode = hashCode * 8191 + joinType.hashCode();

    hashCode = hashCode * 8191 + ((isSetFields()) ? 131071 : 524287);
    if (isSetFields())
      hashCode = hashCode * 8191 + fields.hashCode();

    hashCode = hashCode * 8191 + ((isSetExprs()) ? 131071 : 524287);
    if (isSetExprs())
      hashCode = hashCode * 8191 + exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroup()) ? 131071 : 524287);
    if (isSetGroup())
      hashCode = hashCode * 8191 + group.hashCode();

    hashCode = hashCode * 8191 + ((isSetAggs()) ? 131071 : 524287);
    if (isSetAggs())
      hashCode = hashCode * 8191 + aggs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RelNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRelOp(), other.isSetRelOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relOp, other.relOp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTables(), other.isSetTables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tables, other.tables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInputs(), other.isSetInputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputs, other.inputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCondition(), other.isSetCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, other.condition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJoinType(), other.isSetJoinType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joinType, other.joinType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFields(), other.isSetFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExprs(), other.isSetExprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exprs, other.exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGroup(), other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAggs(), other.isSetAggs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggs, other.aggs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RelNode(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("relOp:");
    if (this.relOp == null) {
      sb.append("null");
    } else {
      sb.append(this.relOp);
    }
    first = false;
    if (isSetTables()) {
      if (!first) sb.append(", ");
      sb.append("tables:");
      if (this.tables == null) {
        sb.append("null");
      } else {
        sb.append(this.tables);
      }
      first = false;
    }
    if (isSetInputs()) {
      if (!first) sb.append(", ");
      sb.append("inputs:");
      if (this.inputs == null) {
        sb.append("null");
      } else {
        sb.append(this.inputs);
      }
      first = false;
    }
    if (isSetCondition()) {
      if (!first) sb.append(", ");
      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
    }
    if (isSetJoinType()) {
      if (!first) sb.append(", ");
      sb.append("joinType:");
      if (this.joinType == null) {
        sb.append("null");
      } else {
        sb.append(this.joinType);
      }
      first = false;
    }
    if (isSetFields()) {
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
    }
    if (isSetExprs()) {
      if (!first) sb.append(", ");
      sb.append("exprs:");
      if (this.exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.exprs);
      }
      first = false;
    }
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    if (isSetAggs()) {
      if (!first) sb.append(", ");
      sb.append("aggs:");
      if (this.aggs == null) {
        sb.append("null");
      } else {
        sb.append(this.aggs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (condition != null) {
      condition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RelNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public RelNodeStandardScheme getScheme() {
      return new RelNodeStandardScheme();
    }
  }

  private static class RelNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<RelNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, RelNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REL_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relOp = com.eurecom.calcite.thrift.RelNodeType.findByValue(iprot.readI32());
              struct.setRelOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.tables = new java.util.ArrayList<java.lang.String>(_list32.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readString();
                  struct.tables.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setTablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.inputs = new java.util.ArrayList<java.lang.Long>(_list35.size);
                long _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = iprot.readI64();
                  struct.inputs.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setInputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.condition = new ExprType();
              struct.condition.read(iprot);
              struct.setConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JOIN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.joinType = iprot.readString();
              struct.setJoinTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.fields = new java.util.ArrayList<java.lang.String>(_list38.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem39;
                for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                {
                  _elem39 = iprot.readString();
                  struct.fields.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                struct.exprs = new java.util.ArrayList<ExprType>(_list41.size);
                @org.apache.thrift.annotation.Nullable ExprType _elem42;
                for (int _i43 = 0; _i43 < _list41.size; ++_i43)
                {
                  _elem42 = new ExprType();
                  _elem42.read(iprot);
                  struct.exprs.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setExprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                struct.group = new java.util.ArrayList<java.lang.Long>(_list44.size);
                long _elem45;
                for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                {
                  _elem45 = iprot.readI64();
                  struct.group.add(_elem45);
                }
                iprot.readListEnd();
              }
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AGGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list47 = iprot.readListBegin();
                struct.aggs = new java.util.ArrayList<AggType>(_list47.size);
                @org.apache.thrift.annotation.Nullable AggType _elem48;
                for (int _i49 = 0; _i49 < _list47.size; ++_i49)
                {
                  _elem48 = new AggType();
                  _elem48.read(iprot);
                  struct.aggs.add(_elem48);
                }
                iprot.readListEnd();
              }
              struct.setAggsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, RelNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.relOp != null) {
        oprot.writeFieldBegin(REL_OP_FIELD_DESC);
        oprot.writeI32(struct.relOp.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.tables != null) {
        if (struct.isSetTables()) {
          oprot.writeFieldBegin(TABLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tables.size()));
            for (java.lang.String _iter50 : struct.tables)
            {
              oprot.writeString(_iter50);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.inputs != null) {
        if (struct.isSetInputs()) {
          oprot.writeFieldBegin(INPUTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.inputs.size()));
            for (long _iter51 : struct.inputs)
            {
              oprot.writeI64(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.condition != null) {
        if (struct.isSetCondition()) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          struct.condition.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.joinType != null) {
        if (struct.isSetJoinType()) {
          oprot.writeFieldBegin(JOIN_TYPE_FIELD_DESC);
          oprot.writeString(struct.joinType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fields != null) {
        if (struct.isSetFields()) {
          oprot.writeFieldBegin(FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fields.size()));
            for (java.lang.String _iter52 : struct.fields)
            {
              oprot.writeString(_iter52);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.exprs != null) {
        if (struct.isSetExprs()) {
          oprot.writeFieldBegin(EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.exprs.size()));
            for (ExprType _iter53 : struct.exprs)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.group.size()));
            for (long _iter54 : struct.group)
            {
              oprot.writeI64(_iter54);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.aggs != null) {
        if (struct.isSetAggs()) {
          oprot.writeFieldBegin(AGGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.aggs.size()));
            for (AggType _iter55 : struct.aggs)
            {
              _iter55.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RelNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public RelNodeTupleScheme getScheme() {
      return new RelNodeTupleScheme();
    }
  }

  private static class RelNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<RelNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RelNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetRelOp()) {
        optionals.set(1);
      }
      if (struct.isSetTables()) {
        optionals.set(2);
      }
      if (struct.isSetInputs()) {
        optionals.set(3);
      }
      if (struct.isSetCondition()) {
        optionals.set(4);
      }
      if (struct.isSetJoinType()) {
        optionals.set(5);
      }
      if (struct.isSetFields()) {
        optionals.set(6);
      }
      if (struct.isSetExprs()) {
        optionals.set(7);
      }
      if (struct.isSetGroup()) {
        optionals.set(8);
      }
      if (struct.isSetAggs()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetRelOp()) {
        oprot.writeI32(struct.relOp.getValue());
      }
      if (struct.isSetTables()) {
        {
          oprot.writeI32(struct.tables.size());
          for (java.lang.String _iter56 : struct.tables)
          {
            oprot.writeString(_iter56);
          }
        }
      }
      if (struct.isSetInputs()) {
        {
          oprot.writeI32(struct.inputs.size());
          for (long _iter57 : struct.inputs)
          {
            oprot.writeI64(_iter57);
          }
        }
      }
      if (struct.isSetCondition()) {
        struct.condition.write(oprot);
      }
      if (struct.isSetJoinType()) {
        oprot.writeString(struct.joinType);
      }
      if (struct.isSetFields()) {
        {
          oprot.writeI32(struct.fields.size());
          for (java.lang.String _iter58 : struct.fields)
          {
            oprot.writeString(_iter58);
          }
        }
      }
      if (struct.isSetExprs()) {
        {
          oprot.writeI32(struct.exprs.size());
          for (ExprType _iter59 : struct.exprs)
          {
            _iter59.write(oprot);
          }
        }
      }
      if (struct.isSetGroup()) {
        {
          oprot.writeI32(struct.group.size());
          for (long _iter60 : struct.group)
          {
            oprot.writeI64(_iter60);
          }
        }
      }
      if (struct.isSetAggs()) {
        {
          oprot.writeI32(struct.aggs.size());
          for (AggType _iter61 : struct.aggs)
          {
            _iter61.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RelNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.relOp = com.eurecom.calcite.thrift.RelNodeType.findByValue(iprot.readI32());
        struct.setRelOpIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list62 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.tables = new java.util.ArrayList<java.lang.String>(_list62.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem63;
          for (int _i64 = 0; _i64 < _list62.size; ++_i64)
          {
            _elem63 = iprot.readString();
            struct.tables.add(_elem63);
          }
        }
        struct.setTablesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list65 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.inputs = new java.util.ArrayList<java.lang.Long>(_list65.size);
          long _elem66;
          for (int _i67 = 0; _i67 < _list65.size; ++_i67)
          {
            _elem66 = iprot.readI64();
            struct.inputs.add(_elem66);
          }
        }
        struct.setInputsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.condition = new ExprType();
        struct.condition.read(iprot);
        struct.setConditionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.joinType = iprot.readString();
        struct.setJoinTypeIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list68 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.fields = new java.util.ArrayList<java.lang.String>(_list68.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem69;
          for (int _i70 = 0; _i70 < _list68.size; ++_i70)
          {
            _elem69 = iprot.readString();
            struct.fields.add(_elem69);
          }
        }
        struct.setFieldsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list71 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.exprs = new java.util.ArrayList<ExprType>(_list71.size);
          @org.apache.thrift.annotation.Nullable ExprType _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = new ExprType();
            _elem72.read(iprot);
            struct.exprs.add(_elem72);
          }
        }
        struct.setExprsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list74 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.group = new java.util.ArrayList<java.lang.Long>(_list74.size);
          long _elem75;
          for (int _i76 = 0; _i76 < _list74.size; ++_i76)
          {
            _elem75 = iprot.readI64();
            struct.group.add(_elem75);
          }
        }
        struct.setGroupIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list77 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.aggs = new java.util.ArrayList<AggType>(_list77.size);
          @org.apache.thrift.annotation.Nullable AggType _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = new AggType();
            _elem78.read(iprot);
            struct.aggs.add(_elem78);
          }
        }
        struct.setAggsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

